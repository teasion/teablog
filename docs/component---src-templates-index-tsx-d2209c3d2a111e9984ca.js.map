{"version":3,"sources":["webpack:///./src/components/Footer.tsx","webpack:///./src/components/Pagination.tsx","webpack:///./src/templates/index.tsx"],"names":["Footer","css","outer","SiteFooter","inner","SiteFooterContent","className","to","config","title","Date","getFullYear","footer","SiteFooterNav","facebook","href","target","rel","twitter","setLightness","colors","darkgrey","navCss","darken","Pagination","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","String","fromCharCode","Array","from","length","_","i","key","pageQuery","HomePosts","IndexPage","props","width","height","data","header","childImageSharp","fixed","Helmet","lang","name","content","description","property","siteUrl","src","googleSiteVerification","split","Wrapper","SiteHeader","SiteHeaderStyles","style","backgroundImage","SiteNav","isHome","logo","maxHeight","alt","id","SiteMain","Posts","PostFeed","allMarkdownRemark","edges","map","post","index","node","frontmatter","draft","PostCard","fields","slug","large","children","pageContext"],"mappings":"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","file":"component---src-templates-index-tsx-d2209c3d2a111e9984ca.js","sourcesContent":["import { Link } from 'gatsby';\r\nimport { setLightness } from 'polished';\r\nimport React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { css } from '@emotion/core';\r\n\r\nimport { colors } from '../styles/colors';\r\nimport { outer, inner } from '../styles/shared';\r\nimport config from '../website-config';\r\n\r\nexport const Footer: React.FC = () => {\r\n  return (\r\n    <footer css={[outer, SiteFooter]}>\r\n      <div css={[inner, SiteFooterContent]}>\r\n        <section className=\"copyright\">\r\n          <Link to=\"/\">{config.title}</Link> &copy; {new Date().getFullYear()}{' '}\r\n          {config.footer && (\r\n            <Link to=\"/\">\r\n              | {config.title} {config.footer}\r\n            </Link>\r\n          )}\r\n        </section>\r\n        <SiteFooterNav>\r\n          <Link to=\"/\">Latest Posts</Link>\r\n          {config.facebook && (\r\n            <a href={config.facebook} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Facebook\r\n            </a>\r\n          )}\r\n          {config.twitter && (\r\n            <a href={config.twitter} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Twitter\r\n            </a>\r\n          )}\r\n\r\n          <a href=\"https://github.com/scttcper/gatsby-casper\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            Casper\r\n          </a>\r\n\r\n          <a href=\"/rss.xml\">RSS</a>\r\n        </SiteFooterNav>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nconst SiteFooter = css`\r\n  position: relative;\r\n  padding-top: 20px;\r\n  padding-bottom: 60px;\r\n  color: #fff;\r\n  background: ${setLightness('0.0015', colors.darkgrey)};\r\n`;\r\n\r\nconst SiteFooterContent = css`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  color: rgba(255, 255, 255, 0.7);\r\n  font-size: 1.3rem;\r\n  a {\r\n    color: rgba(255, 255, 255, 0.7);\r\n  }\r\n  a:hover {\r\n    color: rgba(255, 255, 255, 1);\r\n    text-decoration: none;\r\n  }\r\n  @media (max-width: 650px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst SiteFooterNav = styled.nav`\r\n  display: flex;\r\n\r\n  a {\r\n    position: relative;\r\n    margin-left: 20px;\r\n  }\r\n\r\n  a:before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 11px;\r\n    left: -11px;\r\n    display: block;\r\n    width: 2px;\r\n    height: 2px;\r\n    background: #fff;\r\n    border-radius: 100%;\r\n  }\r\n\r\n  a:first-of-type:before {\r\n    display: none;\r\n  }\r\n  @media (max-width: 650px) {\r\n    a:first-of-type {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`;\r\n\r\n","import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport { darken } from 'polished';\r\nimport { css } from '@emotion/core';\r\n\r\nimport { colors } from '../styles/colors';\r\n\r\nexport interface PaginationProps {\r\n  currentPage: number;\r\n  numPages: number;\r\n}\r\n\r\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\r\n  const isFirst = currentPage === 1;\r\n  const isLast = currentPage === numPages;\r\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\r\n  const nextPage = (currentPage + 1).toString();\r\n\r\n  return (\r\n    <nav css={navCss}>\r\n      <div>\r\n        {!isFirst && (\r\n          <Link to={prevPage} rel=\"prev\">\r\n            {/* << symbol */}\r\n            {String.fromCharCode(171)}\r\n          </Link>\r\n        )}\r\n\r\n        {Array.from({ length: numPages }, (_, i) => (\r\n          <Link key={`pagination-number${i + 1}`} className={i + 1 === currentPage ? 'active' : ''} to={`/${i === 0 ? '' : i + 1}`}>\r\n            {i + 1}\r\n          </Link>\r\n        ))}\r\n\r\n        {!isLast && (\r\n          <Link to={nextPage} rel=\"next\">\r\n            {/* >> symbol */}\r\n            {String.fromCharCode(187)}\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst navCss = css`\r\n  text-align: center;\r\n  div {\r\n    display: inline-block;\r\n  }\r\n\r\n  a {\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\r\n    background: #fff;\r\n    color: black;\r\n    float: left;\r\n    padding: 8px 16px;\r\n    text-decoration: none;\r\n    transition: background-color .3s;\r\n    border: 1px solid #ddd;\r\n    margin: 0 4px;\r\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\r\n    border-radius: 6px;\r\n    margin-bottom: 5px;\r\n    min-width: 50px;\r\n\r\n    &.active {\r\n      -webkit-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\r\n      -moz-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\r\n      box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\r\n    }\r\n\r\n    &:hover:not(.active) {\r\n      background-color: #ddd;\r\n    }\r\n\r\n    &:hover {\r\n      text-decoration: none;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Pagination;\r\n","import { graphql } from 'gatsby';\r\nimport { FixedObject } from 'gatsby-image';\r\nimport React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport { css } from '@emotion/core';\r\n\r\nimport { Footer } from '../components/Footer';\r\nimport SiteNav from '../components/header/SiteNav';\r\nimport Pagination from '../components/Pagination';\r\nimport { PostCard } from '../components/PostCard';\r\nimport { Wrapper } from '../components/Wrapper';\r\nimport IndexLayout from '../layouts';\r\nimport {\r\n  inner,\r\n  outer,\r\n  PostFeed,\r\n  Posts,\r\n  SiteDescription,\r\n  SiteHeader,\r\n  SiteHeaderContent,\r\n  SiteMain,\r\n  SiteTitle,\r\n  SiteHeaderStyles,\r\n} from '../styles/shared';\r\nimport config from '../website-config';\r\nimport { PageContext } from './post';\r\n\r\nexport interface IndexProps {\r\n  pageContext: {\r\n    currentPage: number;\r\n    numPages: number;\r\n  };\r\n  data: {\r\n    logo: {\r\n      childImageSharp: {\r\n        fixed: FixedObject;\r\n      };\r\n    };\r\n    header: {\r\n      childImageSharp: {\r\n        fixed: FixedObject;\r\n      };\r\n    };\r\n    allMarkdownRemark: {\r\n      edges: Array<{\r\n        node: PageContext;\r\n      }>;\r\n    };\r\n  };\r\n}\r\n\r\nconst IndexPage: React.FC<IndexProps> = props => {\r\n  const { width, height } = props.data.header.childImageSharp.fixed;\r\n\r\n  return (\r\n    <IndexLayout css={HomePosts}>\r\n      <Helmet>\r\n        <html lang={config.lang} />\r\n        <title>{config.title}</title>\r\n        <meta name=\"description\" content={config.description} />\r\n        <meta property=\"og:site_name\" content={config.title} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:title\" content={config.title} />\r\n        <meta property=\"og:description\" content={config.description} />\r\n        <meta property=\"og:url\" content={config.siteUrl} />\r\n        <meta\r\n          property=\"og:image\"\r\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\r\n        />\r\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\r\n        {config.googleSiteVerification && (\r\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\r\n        )}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta name=\"twitter:title\" content={config.title} />\r\n        <meta name=\"twitter:description\" content={config.description} />\r\n        <meta name=\"twitter:url\" content={config.siteUrl} />\r\n        <meta\r\n          name=\"twitter:image\"\r\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\r\n        />\r\n        {config.twitter && (\r\n          <meta\r\n            name=\"twitter:site\"\r\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\r\n          />\r\n        )}\r\n        <meta property=\"og:image:width\" content={width.toString()} />\r\n        <meta property=\"og:image:height\" content={height.toString()} />\r\n      </Helmet>\r\n      <Wrapper>\r\n        <div\r\n          css={[outer, SiteHeader, SiteHeaderStyles]}\r\n          className=\"site-header-background\"\r\n          style={{\r\n            backgroundImage: `url('${props.data.header.childImageSharp.fixed.src}')`,\r\n          }}\r\n        >\r\n          <div css={inner}>\r\n            <SiteNav isHome />\r\n            <SiteHeaderContent className=\"site-header-conent\">\r\n              <SiteTitle className=\"site-title\">\r\n                {props.data.logo ? (\r\n                  <img\r\n                    style={{ maxHeight: '55px' }}\r\n                    src={props.data.logo.childImageSharp.fixed.src}\r\n                    alt={config.title}\r\n                  />\r\n                ) : (\r\n                  config.title\r\n                )}\r\n              </SiteTitle>\r\n              <SiteDescription>{config.description}</SiteDescription>\r\n            </SiteHeaderContent>\r\n          </div>\r\n        </div>\r\n        <main id=\"site-main\" css={[SiteMain, outer]}>\r\n          <div css={[inner, Posts]}>\r\n            <div css={[PostFeed]}>\r\n              {props.data.allMarkdownRemark.edges.map((post, index) => {\r\n                // filter out drafts in production\r\n                return (\r\n                  (post.node.frontmatter.draft !== true ||\r\n                    process.env.NODE_ENV !== 'production') && (\r\n                    <PostCard key={post.node.fields.slug} post={post.node} large={index === 0} />\r\n                  )\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </main>\r\n        {props.children}\r\n        {props.pageContext.numPages > 1 && (\r\n          <Pagination\r\n            currentPage={props.pageContext.currentPage}\r\n            numPages={props.pageContext.numPages}\r\n          />\r\n        )}\r\n        <Footer />\r\n      </Wrapper>\r\n    </IndexLayout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query blogPageQuery($skip: Int!, $limit: Int!) {\r\n    logo: file(relativePath: { eq: \"img/ghost-logo.png\" }) {\r\n      childImageSharp {\r\n        # Specify the image processing specifications right in the query.\r\n        # Makes it trivial to update as your page's design changes.\r\n        fixed {\r\n          ...GatsbyImageSharpFixed\r\n        }\r\n      }\r\n    }\r\n    header: file(relativePath: { eq: \"img/blog-cover.png\" }) {\r\n      childImageSharp {\r\n        # Specify the image processing specifications right in the query.\r\n        # Makes it trivial to update as your page's design changes.\r\n        fixed(width: 2000, quality: 100) {\r\n          ...GatsbyImageSharpFixed\r\n        }\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { draft: { ne: true } } }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            date\r\n            tags\r\n            draft\r\n            excerpt\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 3720) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            author {\r\n              id\r\n              bio\r\n              avatar {\r\n                children {\r\n                  ... on ImageSharp {\r\n                    fluid(quality: 100, srcSetBreakpoints: [40, 80, 120]) {\r\n                      ...GatsbyImageSharpFluid\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          excerpt\r\n          fields {\r\n            layout\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst HomePosts = css`\r\n  @media (min-width: 795px) {\r\n    .post-card-large {\r\n      flex: 1 1 100%;\r\n      flex-direction: row;\r\n      padding-bottom: 40px;\r\n      min-height: 280px;\r\n      border-top: 0;\r\n    }\r\n\r\n    .post-card-large .post-card-title {\r\n      margin-top: 0;\r\n      font-size: 3.2rem;\r\n    }\r\n\r\n    .post-card-large:not(.no-image) .post-card-header {\r\n      margin-top: 0;\r\n    }\r\n\r\n    .post-card-large .post-card-image-link {\r\n      position: relative;\r\n      flex: 1 1 auto;\r\n      margin-bottom: 0;\r\n      min-height: 380px;\r\n    }\r\n\r\n    .post-card-large .post-card-image {\r\n      position: absolute;\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n\r\n    .post-card-large .post-card-content {\r\n      flex: 0 1 361px;\r\n      justify-content: center;\r\n    }\r\n\r\n    .post-card-large .post-card-title {\r\n      margin-top: 0;\r\n      font-size: 3.2rem;\r\n    }\r\n\r\n    .post-card-large .post-card-content-link {\r\n      padding: 0 0 0 40px;\r\n    }\r\n\r\n    .post-card-large .post-card-meta {\r\n      padding: 0 0 0 40px;\r\n    }\r\n\r\n    .post-card-large .post-card-excerpt p {\r\n      margin-bottom: 1.5em;\r\n      font-size: 1.8rem;\r\n      line-height: 1.5em;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}